// Generated by CoffeeScript 1.7.1
var Message, ObjectId, Question, m, mongoose, q, twilio;

twilio = require('twilio');

mongoose = require('mongoose');

q = require('../models/question');

m = require('../models/message');

ObjectId = mongoose.Types.ObjectId;

Question = mongoose.model('Question');

Message = mongoose.model('Message');

exports.all = function(req, res, next) {
  return Question.find().select('question answer').exec(function(err, questions) {
    var output;
    if (err) {
      return next(err);
    } else {
      output = {
        Questions: questions
      };
      return res.send(output);
    }
  });
};

exports.insert = function(req, res, next) {
  var question;
  question = new Question({
    question: req.body.question,
    answer: req.body.answer
  });
  return question.save(function(err) {
    if (err) {
      return next(err);
    } else {
      return res.send(question);
    }
  });
};

exports.update = function(req, res, next) {
  var questionId;
  questionId = req.body.id;
  Message.find({
    'question': questionId
  }).populate('question').select('question source destination').exec(function(err, messages) {
    if (err) {
      return next(err);
    } else {
      console.log(messages);
      return messages.forEach(function(message, index, messages) {
        var accountSid, authtoken, client, destination, source;
        destination = message.source;
        source = message.destination;
        accountSid = "ACfaa9a45e4f94940cee4d879837d92761";
        authtoken = "330fc8bcc245be6475447062f80bc899";
        client = new twilio.RestClient(accountSid, authtoken);
        return client.sms.messages.create({
          to: destination,
          from: source,
          body: req.body.answer
        }, function(err, message) {
          if (!err) {
            return console.log(message.sid);
          } else {
            return console.log('OOPS!');
          }
        });
      });
    }
  });
  return Question.update({
    _id: questionId
  }, {
    answer: req.body.answer
  }, {
    multi: true
  }, function(err, numAffected, response) {
    if (err) {
      return next(err);
    } else {
      return res.send(response);
    }
  });
};
