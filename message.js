// Generated by CoffeeScript 1.7.1
var Message, Question, SimilarityMeasure, http, m, mongoose, q;

http = require('http');

mongoose = require('mongoose');

m = require('../models/message');

q = require('../models/question');

Question = mongoose.model('Question');

Message = mongoose.model('Message');

SimilarityMeasure = function(text1, text2) {
  var url;
  url = "http://www.tools4noobs.com/ajax_string_similarity?text=";
  text1 = encodeURI(text1);
  text2 = encodeURI(text2);
  url = url + text1 + '&text2=' + text2 + '&limit=0.0';
  return http.get(url, function(res) {
    var responseText;
    responseText = "";
    res.on('data', function(chunk) {
      return responseText += chunk;
    });
    return res.on('end', function() {
      var confidence;
      confidence = responseText.match(/\d+\.\d+/g);
      return parseFloat(confidence);
    });
  });
};

exports.incomingListener = function(req, res, next) {
  return console.log(req.body);
};

exports["new"] = function(req, res, next) {
  var lastAccessedTime;
  lastAccessedTime = new Date(req.params.lastAccessedTime);
  return Message.find({
    'time': {
      '$gte': lastAccessedTime
    }
  }).exec(function(err, messages) {
    if (err) {
      return next(err);
    } else {
      return res.send(messages);
    }
  });
};

exports.insert = function(req, res, next) {
  var message, questionObj;
  questionObj = new Question({
    question: req.body.question.question,
    answer: req.body.question.answer
  });
  message = new Message({
    source: req.body.source,
    destination: req.body.destination,
    question: questionObj._id,
    time: Date.now()
  });
  return questionObj.save(function(err) {
    if (err) {
      return next(req);
    } else {
      return message.save(function(err) {
        if (err) {
          return next(err);
        } else {
          return res.send(message);
        }
      });
    }
  });
};
